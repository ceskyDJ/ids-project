--------------------------------------
--                                  --
--      IDS project - 4th part      --
--                                  --
-- Author: Michal Šmahel (xsmahe01) --
-- Author: Martin Havlík (xhavli56) --
-- Date: April 2022                 --
--------------------------------------

-- Help:
-- dk = discriminator key (part of primary key in weak entities)

-- Error codes:
-- 20000 : Registering for more exam dates than allowed.
-- 20001 : Registering exam date for an exam to which student is not admitted.
-- 20002 : Registering for non existent exam date.
-- 20003 : Registering outside permitted registration time window.
-- 20004 : User who is not an enrolled student trying to register exam date.

------------------------------------------------------------------------------------------------------------------ RESET
-- Tables
-- Note: PURGE is used for unnamed linked sequences deletion
DROP TABLE question_assessments;
DROP TABLE exam_elaborations PURGE;
DROP TABLE registered_exam_dates;
DROP TABLE exams_in_rooms;
DROP TABLE exam_dates;
DROP TABLE students_admitted_to_exams;
DROP TABLE exams PURGE;
DROP TABLE lecturers_teaching_courses;
DROP TABLE course_guarantors;
DROP TABLE lecturers;
DROP TABLE courses PURGE;
DROP TABLE rooms;
DROP TABLE enrolled_students;
DROP TABLE users PURGE;

-- Views
DROP VIEW students_marks;
DROP VIEW academics;
DROP VIEW my_marks;
DROP VIEW my_exam_dates;
DROP VIEW my_available_exam_dates;
DROP MATERIALIZED VIEW courses_info;

-- Indexes and privileges removed by dropping tables

----------------------------------------------------------------------------------------------------------------- TABLES
-- Users
CREATE TABLE users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login VARCHAR2(20) NOT NULL CHECK(REGEXP_LIKE(login, '^(x[a-z]{5}[0-9a-z]{2}|[a-wyz][a-z]+)$')),
    password VARCHAR2(255) NOT NULL,
    first_name VARCHAR2(30) NOT NULL,
    last_name VARCHAR2(30) NOT NULL,
    date_of_birth DATE NOT NULL
);

-- Enrolled students
CREATE TABLE enrolled_students (
    student_id REFERENCES users(user_id), -- FK & PK
    academic_year CHAR(9) NOT NULL CHECK(REGEXP_LIKE(academic_year, '^\d{4}/\d{4}$')), -- PK
    year_of_study NUMBER(2) NOT NULL CHECK(year_of_study > 0),
    study_program VARCHAR2(10) NOT NULL CHECK(study_program IN ('bachelor', 'master', 'doctoral')),
    CONSTRAINT pk_enrolled_students PRIMARY KEY (student_id, academic_year)
);

-- Rooms
CREATE TABLE rooms (
    room_label VARCHAR2(7) PRIMARY KEY,
    capacity NUMBER(3) NOT NULL CHECK(capacity > 0) -- up to 999
);

-- Lecturers
CREATE TABLE lecturers (
    lecturer_id REFERENCES users(user_id) PRIMARY KEY, -- FK & PK
    room_label REFERENCES rooms(room_label) NOT NULL, -- FK
    -- Source: https://www.jochentopf.com/email/chars.html (only chars with "OK"), https://www.ietf.org/rfc/rfc1035.txt, simplified
    email VARCHAR2(125) NOT NULL UNIQUE CHECK(REGEXP_LIKE(email, '^[0-9A-Za-z+\-_]([0-9A-Za-z+\-_.]?[0-9A-Za-z+\-_])*@([a-zA-Z][a-zA-Z0-9\-]*\.)+[a-zA-Z][a-zA-Z0-9\-]+$')),
    phone_number CHAR(13) CHECK(REGEXP_LIKE(phone_number, '^\+\d{12}$'))
);

-- Courses
CREATE TABLE courses (
    course_abbreviation VARCHAR2(5) PRIMARY KEY, -- PK
    semester VARCHAR2(6) NOT NULL CHECK(semester IN ('summer', 'winter')),
    name VARCHAR2(70) NOT NULL,
    awarded_credits NUMBER(2) NOT NULL CHECK(awarded_credits > 0),
    description VARCHAR2(1000)
);

-- Lecturers teaching courses (Lecturers <-> Courses)
CREATE TABLE lecturers_teaching_courses (
    lecturer_id REFERENCES lecturers(lecturer_id), -- FK & PK
    course_abbreviation REFERENCES courses(course_abbreviation), --FK & PK
    academic_year CHAR(9) NOT NULL CHECK(REGEXP_LIKE(academic_year, '^\d{4}/\d{4}$')), -- PK
    CONSTRAINT pk_lecturers_teaching_courses PRIMARY KEY (lecturer_id, course_abbreviation, academic_year)
);

-- Course guarantors
CREATE TABLE course_guarantors (
    course_abbreviation REFERENCES courses(course_abbreviation), -- FK & PK
    academic_year CHAR(9) NOT NULL CHECK(REGEXP_LIKE(academic_year, '^\d{4}/\d{4}$')), -- PK
    guarantor_id REFERENCES lecturers(lecturer_id) NOT NULL, -- FK
    CONSTRAINT pk_course_guarantors PRIMARY KEY (course_abbreviation, academic_year)
);

-- Exams
CREATE TABLE exams (
    exam_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK
    course_abbreviation REFERENCES courses(course_abbreviation) NOT NULL, -- FK
    academic_year CHAR(9) NOT NULL CHECK(REGEXP_LIKE(academic_year, '^\d{4}/\d{4}$')),
    type VARCHAR2(10) NOT NULL CHECK(type IN ('midterm', 'term')),
    time_limit NUMBER(3) NOT NULL CHECK(time_limit > 0),
    max_points NUMBER(3) NOT NULL CHECK(max_points BETWEEN 0 and 100),
    min_points NUMBER(3) NOT NULL CHECK(min_points BETWEEN 0 and 100)
);

-- Students admitted to exams (Enrolled students <-> Exams)
CREATE TABLE students_admitted_to_exams (
    student_id, -- FK & PK
    academic_year, -- FK & PK
    exam_id REFERENCES exams(exam_id) NOT NULL, -- FK & PK
    points_so_far NUMBER(2) NOT NULL CHECK(points_so_far BETWEEN 0 and 99),
    FOREIGN KEY (academic_year, student_id) REFERENCES enrolled_students(academic_year, student_id),
    CONSTRAINT pk_students_admitted_to_exams PRIMARY KEY (academic_year, student_id, exam_id)
);

-- Exam dates
CREATE TABLE exam_dates (
    exam_id REFERENCES exams(exam_id), -- FK & PK
    exam_date_number NUMBER(3) CHECK(exam_date_number > 0),
    format VARCHAR2(10) NOT NULL CHECK(format IN ('oral', 'written', 'combined')),
    no_questions NUMBER(2) NOT NULL CHECK(no_questions > 0),
    time_of_exam TIMESTAMP NOT NULL,
    registration_start TIMESTAMP NOT NULL,
    registration_end TIMESTAMP NOT NULL,
    student_capacity NUMBER(3) NOT NULL CHECK(student_capacity > 0),
    CONSTRAINT pk_exam_dates PRIMARY KEY (exam_id, exam_date_number)
);

-- Exams in rooms (Exam dates <-> Rooms)
CREATE TABLE exams_in_rooms (
    exam_id, -- FK & PK
    exam_date_number, -- FK & PK
    room_label REFERENCES rooms(room_label), -- FK & PK
    FOREIGN KEY (exam_id, exam_date_number) REFERENCES exam_dates(exam_id, exam_date_number),
    CONSTRAINT pk_exams_in_rooms PRIMARY KEY (exam_id, exam_date_number, room_label)
);

-- Registered exam dates (Enrolled students <-> Exam dates)
CREATE TABLE registered_exam_dates (
    exam_id, -- FK & PK
    exam_date_number, -- FK & TRIGGERSPK
    student_id, -- FK & PK
    academic_year, -- FK & PK
    FOREIGN KEY (student_id, academic_year) REFERENCES enrolled_students(student_id, academic_year),
    FOREIGN KEY (exam_id, exam_date_number) REFERENCES exam_dates(exam_id, exam_date_number),
    CONSTRAINT pk_registered_exam_dates PRIMARY KEY (student_id, academic_year, exam_id, exam_date_number)
);

-- Exam elaborations
CREATE TABLE exam_elaborations (
    exam_elaboration_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK
    student_id NOT NULL, -- FK
    academic_year NOT NULL, -- FK
    exam_id NOT NULL, -- FK
    exam_date_number NOT NULL, -- FK
    state_of_completion VARCHAR2(15) NOT NULL CHECK(state_of_completion IN ('completed', 'expelled', 'not_finished')),
    FOREIGN KEY (student_id, academic_year) REFERENCES enrolled_students(student_id, academic_year),
    FOREIGN KEY (exam_id, exam_date_number) REFERENCES exam_dates(exam_id, exam_date_number)
);

-- Question assessments
CREATE TABLE question_assessments (
    exam_elaboration_id REFERENCES exam_elaborations(exam_elaboration_id), -- FK & PK
    question_number NUMBER(2) CHECK(question_number > 0), -- PK
    lecturer_id REFERENCES lecturers(lecturer_id) NOT NULL, -- FK
    time_of_assessments TIMESTAMP NOT NULL,
    awarded_points NUMBER(3) NOT NULL CHECK(awarded_points BETWEEN 0 and 100),
    "comment" VARCHAR2(500),
    CONSTRAINT pk_question_assessments PRIMARY KEY (exam_elaboration_id, question_number)
);


------------------------------------------------------------------------------------------------------------------- DATA
-- Users
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (230974, 'xhavli56', '893hfww0hs', 'Martin', 'Havlik', TO_DATE('2000-08-19', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (231754, 'xsmahe01', '80hsfd89&57', 'Michal', 'Šmahel', TO_DATE('1999-02-27', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (230365, 'xrados22', 'h6GT0gx3', 'Milan', 'Radostný', TO_DATE('2000-10-01', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220300, 'ikonrad', '773939hfhd0s0', 'Michal', 'Konrád', TO_DATE('1979-05-03', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (230786, 'xivano02', 'g0AL8LG', 'Andrei', 'Ivanov', TO_DATE('2001-05-07', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (229797, 'xsokol17', 'hgkldfakl89358', 'Richard', 'Sokol', TO_DATE('1998-11-14', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (221456, 'imesner', 'jg_hgd^$)hs0&3', 'Lubomír', 'Mesner', TO_DATE('1971-03-05', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (230999, 'xkubik36', '838vh1ghs0hf', 'Radovan', 'Kubík', TO_DATE('1997-04-11', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220546, 'ilojza', '^)#&hslgh07503', 'Květoslav', 'Lojza', TO_DATE('1971-12-20', 'yyyy-mm-dd'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220777, 'xkotak12', '^)#&hsjfdsk3333', 'Samuel', 'Kotaki', TO_DATE('11-11-1996', 'dd-mm-yyyy'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (221343, 'xhorne00', '^)#&hfd5682##sk33', 'Micheal', 'Horner', TO_DATE('8-8-1996', 'dd-mm-yyyy'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (221600, 'xpalav13', '^)#&h568^#@l2##33', 'Ondřej', 'Pálava', TO_DATE('8-8-1996', 'dd-mm-yyyy'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220800, 'igolan', '^)#&6^53^^@2#33', 'Radim', 'Goláň', TO_DATE('4-4-1973', 'dd-mm-yyyy'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220900, 'ineumann', '^)#&53^@535##', 'Vladislav', 'Neumann', TO_DATE('1-5-1985', 'dd-mm-yyyy'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220950, 'mozola', '^)6$%#535##', 'Radovan', 'Mozola', TO_DATE('17-3-1960', 'dd-mm-yyyy'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220880, 'soudek', '^)635#jfkds#', 'Pavel', 'Soudek', TO_DATE('28-5-1958', 'dd-mm-yyyy'));
INSERT INTO users (user_id, login, password, first_name, last_name, date_of_birth)
    VALUES (220740, 'hrncir', '^)6$%7777fjfkd$$fjfk', 'Otakar', 'Hrnčíř', TO_DATE('11-7-1971', 'dd-mm-yyyy'));

-- Enrolled students
INSERT INTO enrolled_students (student_id, academic_year, year_of_study, study_program)
    VALUES (230974, '2021/2022', '2', 'bachelor');
INSERT INTO enrolled_students (student_id, academic_year, year_of_study, study_program)
    VALUES (231754, '2021/2022', '3', 'bachelor');
INSERT INTO enrolled_students (student_id, academic_year, year_of_study, study_program)
    VALUES (230365, '2021/2022', '2', 'bachelor');
INSERT INTO enrolled_students (student_id, academic_year, year_of_study, study_program)
    VALUES (229797, '2021/2022', '2', 'master');
INSERT INTO enrolled_students (student_id, academic_year, year_of_study, study_program)
    VALUES (220777, '2021/2022', '3', 'bachelor');
INSERT INTO enrolled_students (student_id, academic_year, year_of_study, study_program)
    VALUES (221343, '2021/2022', '2', 'master');
INSERT INTO enrolled_students (student_id, academic_year, year_of_study, study_program)
    VALUES (221600, '2021/2022', '4', 'bachelor');

-- Rooms
INSERT INTO rooms (room_label, capacity)
    VALUES ('L206', 20);
INSERT INTO rooms (room_label, capacity)
    VALUES ('L108', 20);
INSERT INTO rooms (room_label, capacity)
    VALUES ('D105', 350);
INSERT INTO rooms (room_label, capacity)
    VALUES ('E105', 150);
INSERT INTO rooms (room_label, capacity)
    VALUES ('E112', 250);
INSERT INTO rooms (room_label, capacity)
    VALUES ('C121', 70);
INSERT INTO rooms (room_label, capacity)
    VALUES ('A222', 10);

-- Lecturers
INSERT INTO lecturers (lecturer_id, room_label, email, phone_number)
    VALUES (220300, 'L206', 'ikonrad@fit.cz', '+420732657800');
INSERT INTO lecturers (lecturer_id, room_label, email)
    VALUES (221456, 'L108', 'imesner@fit.cz');
INSERT INTO lecturers (lecturer_id, room_label, email, phone_number)
    VALUES (220546, 'L206', 'klojza@gmail.com', '+420721504657');
INSERT INTO lecturers (lecturer_id, room_label, email)
    VALUES (220950, 'A222', 'mozola@openfwt.org');
INSERT INTO lecturers (lecturer_id, room_label, email)
    VALUES (220800, 'A222', 'golan@vutbr.cz');
INSERT INTO lecturers (lecturer_id, room_label, email)
    VALUES (220900, 'L108', 'neumann.vladislav@gmail.com');
INSERT INTO lecturers (lecturer_id, room_label, email)
    VALUES (220880, 'L108', 'soudekpa@fit.cz');
INSERT INTO lecturers (lecturer_id, room_label, email)
    VALUES (220740, 'A222', 'hrncir@protomon.com');

-- Courses
INSERT INTO courses  (course_abbreviation, semester, name, awarded_credits, description)
    VALUES ('IDS', 'summer', 'Database Systems', 5, 'IDS desc');
INSERT INTO courses  (course_abbreviation, semester, name, awarded_credits, description)
    VALUES ('IAN', 'summer', 'Binary Code Analysis', 4, 'IAN desc');
INSERT INTO courses  (course_abbreviation, semester, name, awarded_credits, description)
    VALUES ('IMA2', 'winter', 'Calculus 2', 4, 'IMA2 desc');
INSERT INTO courses  (course_abbreviation, semester, name, awarded_credits, description)
    VALUES ('IAL', 'winter', 'Algorithms', 5, 'Sorting, trees, structures and stuff');
INSERT INTO courses  (course_abbreviation, semester, name, awarded_credits, description)
    VALUES ('INP', 'winter', 'Design of Computer Systems', 6, 'Brainfuck CPU');

-- Course guarantors (Lecturers <-> Courses)
INSERT INTO course_guarantors (course_abbreviation, academic_year, guarantor_id)
    VALUES ('IDS', '2021/2022', 221456);
INSERT INTO course_guarantors (course_abbreviation, academic_year, guarantor_id)
    VALUES ('IAN', '2021/2022', 220300);
INSERT INTO course_guarantors (course_abbreviation, academic_year, guarantor_id)
    VALUES ('IMA2', '2021/2022', 220300);
INSERT INTO course_guarantors (course_abbreviation, academic_year, guarantor_id)
    VALUES ('IAL', '2021/2022', 220950);
INSERT INTO course_guarantors (course_abbreviation, academic_year, guarantor_id)
    VALUES ('INP', '2021/2022', 220950);

-- Lecturers teaching courses (Lecturers <-> Courses)
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220546, 'IDS', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (221456, 'IDS', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220546, 'IAN', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220300, 'IMA2', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220950, 'IAL', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220950, 'INP', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220800, 'IAL', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220900, 'IDS', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220880, 'IMA2', '2021/2022');
INSERT INTO lecturers_teaching_courses (lecturer_id, course_abbreviation, academic_year)
    VALUES (220740, 'IMA2', '2021/2022');

-- Exams
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (12, 'IDS', '2021/2022', 'midterm', 60, 15, 0);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (33, 'IDS', '2021/2022', 'term', 100, 51, 20);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (40, 'IAN', '2021/2022', 'midterm', 40, 20, 0);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (50, 'IAN', '2021/2022', 'term', 50, 40, 0);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (62, 'IMA2', '2021/2022', 'term', 120, 80, 40);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (70, 'IAL', '2021/2022', 'midterm', 40, 20, 0);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (73, 'IAL', '2021/2022', 'term', 100, 50, 15);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (5, 'IAL', '2020/2021', 'term', 100, 50, 15);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (80, 'INP', '2021/2022', 'midterm', 50, 25, 0);
INSERT INTO exams (exam_id, course_abbreviation, academic_year, type, time_limit, max_points, min_points)
    VALUES (85, 'INP', '2021/2022', 'term', 120, 60, 20);

-- Students admitted to exams (Enrolled students <-> Exams)
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 231754, 62, 15);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 231754, 33, 35);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230974, 33, 30);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 231754, 50, 50);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230365, 70, 10);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 220777, 70, 11);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230974, 70, 9);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230974, 73, 20);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230974, 80, 13);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 231754, 80, 7);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 231754, 73, 10);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 231754, 70, 10);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230365, 80, 10);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230365, 62, 14);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230365, 73, 15);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 221600, 12, 5);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 221600, 33, 10);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 221600, 73, 11);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 221600, 62, 15);
INSERT INTO students_admitted_to_exams (academic_year, student_id, exam_id, points_so_far)
    VALUES ('2021/2022', 230974, 62, 14);

-- Exam dates
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (12, 1, 'written', 6, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 150);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (12, 2, 'written', 6, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 150);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (62, 1, 'written', 10, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 800);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (62, 2, 'written', 11, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 400);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (62, 3, 'written', 12, CURRENT_TIMESTAMP, TO_TIMESTAMP('2022-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), TO_TIMESTAMP('2023-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), 200);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (62, 4, 'oral', 7, CURRENT_TIMESTAMP, TO_TIMESTAMP('2022-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), TO_TIMESTAMP('2023-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), 100);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (33, 1, 'written', 5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 300);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (33, 2, 'written', 5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 150);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (33, 3, 'written', 5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 150);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (70, 1, 'written', 7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 400);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (70, 2, 'written', 7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 400);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (73, 1, 'written', 8, TO_TIMESTAMP('2022-03-30 10:00:00', 'yyyy-mm-dd hh24:mi:ss'), TO_TIMESTAMP('2022-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), TO_TIMESTAMP('2023-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), 800);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (73, 2, 'written', 8, TO_TIMESTAMP('2022-03-30 10:00:00', 'yyyy-mm-dd hh24:mi:ss'), TO_TIMESTAMP('2022-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), TO_TIMESTAMP('2023-03-19 20:00:00', 'yyyy-mm-dd hh24:mi:ss'), 800);
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (73, 3, 'written', 7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 300);

-- Exams in rooms (Exam dates <-> Rooms)
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (12, 1, 'D105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (12, 2, 'D105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (62, 2, 'E105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (62, 3, 'E105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (33, 1, 'E105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (33, 2, 'D105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (33, 3, 'E105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (70, 1, 'D105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (70, 2, 'D105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (73, 1, 'E105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (73, 2, 'E105');
INSERT INTO exams_in_rooms (exam_id, exam_date_number, room_label)
    VALUES (73, 3, 'E105');

-- Registered exam dates (Enrolled students <-> Exam dates)
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (231754, '2021/2022', 62, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (231754, '2021/2022', 62, 2);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230974, '2021/2022', 33, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230974, '2021/2022', 70, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230974, '2021/2022', 70, 2);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230974, '2021/2022', 73, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (231754, '2021/2022', 33, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230365, '2021/2022', 62, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230365, '2021/2022', 62, 2);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230365, '2021/2022', 70, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (230365, '2021/2022', 73, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 12, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 33, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 33, 2);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 73, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 73, 2);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 62, 1);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 62, 2);
INSERT INTO registered_exam_dates (student_id, academic_year, exam_id, exam_date_number)
    VALUES (221600, '2021/2022', 62, 3);

-- Exam elaborations (Enrolled students <-> Exam dates)
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (100, 231754, '2021/2022', 62, 1, 'expelled');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (101, 231754, '2021/2022', 62, 2, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (110, 231754, '2021/2022', 33, 1, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (120, 230974, '2021/2022', 62, 1, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (121, 230974, '2021/2022', 62, 2, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (130, 230974, '2021/2022', 73, 1, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (140, 231754, '2021/2022', 73, 1, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (141, 231754, '2021/2022', 73, 2, 'expelled');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (150, 230365, '2021/2022', 62, 1, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (151, 230365, '2021/2022', 62, 2, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (160, 221600, '2021/2022', 62, 1, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (161, 221600, '2021/2022', 62, 2, 'completed');
INSERT INTO exam_elaborations (exam_elaboration_id, student_id, academic_year, exam_id, exam_date_number, state_of_completion)
    VALUES (162, 221600, '2021/2022', 62, 3, 'completed');

-- Question assessments
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (100, 1, 220300, 8, CURRENT_TIMESTAMP, 'minor mistake in notation');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (100, 2, 220300, 12, CURRENT_TIMESTAMP, 'ok');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (100, 3, 220300, 8, CURRENT_TIMESTAMP, 'not so ok');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (100, 4, 220300, 7, CURRENT_TIMESTAMP, 'kinda bad');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (100, 5, 220300, 0, CURRENT_TIMESTAMP, 'you absolutely do not know what it is about');

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (101, 1, 220300, 15, CURRENT_TIMESTAMP, 'flawless definition, good job');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (101, 2, 220300, 11, CURRENT_TIMESTAMP, 'kinda okey');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (101, 3, 220300, 10, CURRENT_TIMESTAMP, 'meh');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (101, 4, 220300, 5, CURRENT_TIMESTAMP, 'are you serious?');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (101, 5, 220300, 12, CURRENT_TIMESTAMP, 'ok');

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (110, 1, 220546, 2, CURRENT_TIMESTAMP, 'not enough');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (110, 2, 220546, 10, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (110, 3, 220546, 9, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (110, 4, 220546, 8, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (110, 5, 220546, 11, CURRENT_TIMESTAMP, 'this answer does indeed suffice');

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (120, 1, 220546, 11, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (120, 2, 220546, 12, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (120, 3, 220740, 3, CURRENT_TIMESTAMP, 'nonsense, what were you thinking?!?');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (120, 4, 220546, 10, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (120, 5, 220546, 11, CURRENT_TIMESTAMP, 'bravo');

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (121, 1, 220740, 11, CURRENT_TIMESTAMP, 'ok');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (121, 2, 220740, 12, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (121, 3, 220546, 10, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (121, 4, 220740, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (121, 5, 220740, 15, CURRENT_TIMESTAMP, 'not so difficult, see?');

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (130, 1, 220950, 4, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (130, 2, 220950, 6, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (130, 3, 220950, 3, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (130, 4, 220950, 2, CURRENT_TIMESTAMP, 'wrong order of operators');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (130, 5, 220950, 6, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (130, 6, 220950, 5, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (130, 7, 220950, 6, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (130, 8, 220950, 4, CURRENT_TIMESTAMP);

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (140, 1, 220950, 5, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (140, 2, 220950, 4, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (140, 3, 220950, 6, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (140, 4, 220950, 2, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (140, 5, 220950, 4, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (140, 6, 220950, 5, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (140, 7, 220950, 4, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (140, 8, 220950, 4, CURRENT_TIMESTAMP, 'solid results, above average');

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (150, 1, 220300, 15, CURRENT_TIMESTAMP, 'ok');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (150, 2, 220300, 11, CURRENT_TIMESTAMP, 'almost there, missing final result');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (150, 3, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (150, 4, 220300, 15, CURRENT_TIMESTAMP, 'nice job');
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (150, 5, 220300, 0, CURRENT_TIMESTAMP, 'you forgot this one?');

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (151, 1, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (151, 2, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (151, 3, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (151, 4, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (151, 5, 220300, 15, CURRENT_TIMESTAMP);

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (160, 1, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (160, 2, 220300, 12, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (160, 3, 220300, 13, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (160, 4, 220300, 10, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (160, 5, 220300, 0, CURRENT_TIMESTAMP);

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (161, 1, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (161, 2, 220300, 12, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (161, 3, 220300, 13, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (161, 4, 220300, 0, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (161, 5, 220300, 9, CURRENT_TIMESTAMP);

INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (162, 1, 220300, 15, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (162, 2, 220300, 12, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (162, 3, 220300, 13, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (162, 4, 220300, 14, CURRENT_TIMESTAMP);
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments)
    VALUES (162, 5, 220300, 15, CURRENT_TIMESTAMP);

COMMIT;
------------------------------------------------------------------------------------------------------------------ VIEWS
-- Write out all marks for all students
CREATE VIEW students_marks AS
    WITH last_exam_dates AS (
        SELECT ed.exam_id, rd.student_id, MAX(ed.exam_date_number) last_exam_date_number
            FROM exam_dates ed
            JOIN registered_exam_dates rd ON ed.exam_id = rd.exam_id AND ed.exam_date_number = rd.exam_date_number
            GROUP BY ed.exam_id, rd.student_id
    )
    SELECT DISTINCT es.student_id, ex.academic_year, co.semester, co.name course_name, co.course_abbreviation, sa.points_so_far + COALESCE(SUM(qa.awarded_points), 0) || ' ' || CASE
            WHEN sa.points_so_far + COALESCE(SUM(qa.awarded_points), 0) >= 90 THEN 'A'
            WHEN sa.points_so_far + COALESCE(SUM(qa.awarded_points), 0) >= 80 THEN 'B'
            WHEN sa.points_so_far + COALESCE(SUM(qa.awarded_points), 0) >= 70 THEN 'C'
            WHEN sa.points_so_far + COALESCE(SUM(qa.awarded_points), 0) >= 60 THEN 'D'
            WHEN sa.points_so_far + COALESCE(SUM(qa.awarded_points), 0) >= 50 THEN 'E'
            ELSE 'F' END mark
        FROM enrolled_students es
        JOIN registered_exam_dates re ON es.student_id = re.student_id AND es.academic_year = re.academic_year
        JOIN students_admitted_to_exams sa ON es.student_id = sa.student_id AND es.academic_year = sa.academic_year AND re.exam_id = sa.exam_id
        JOIN exams ex ON sa.exam_id = ex.exam_id
        JOIN courses co ON ex.course_abbreviation = co.course_abbreviation
        JOIN last_exam_dates le ON ex.exam_id = le.exam_id AND es.student_id = le.student_id
        LEFT JOIN exam_elaborations ea ON es.student_id = ea.student_id AND ex.exam_id = ea.exam_id AND re.exam_date_number = ea.exam_date_number
        LEFT JOIN question_assessments qa ON ea.exam_elaboration_id = qa.exam_elaboration_id
        WHERE ex.type = 'term' AND re.exam_date_number = le.last_exam_date_number
        GROUP BY es.student_id, ex.academic_year, co.semester,  co.name, co.course_abbreviation, sa.points_so_far
        ORDER BY course_name;

-- Write public list of academics
CREATE VIEW academics AS
    SELECT le.lecturer_id, us.first_name, us.last_name, le.email, le.phone_number, le.room_label office
        FROM users us
        JOIN lecturers le ON us.user_id = le.lecturer_id;

-- Write marks only for currently logged in user
CREATE VIEW my_marks AS
    SELECT semester, course_name, course_abbreviation, mark
        FROM students_marks sm
        JOIN enrolled_students es ON sm.student_id = es.student_id AND sm.academic_year = es.academic_year
        JOIN users us ON es.student_id = us.user_id
        WHERE us.login = LOWER(SYS_CONTEXT('USERENV','CURRENT_USER'));

-- Write registered exam dates for currently logged in user
CREATE VIEW my_exam_dates AS
    SELECT co.course_abbreviation, co.name course_name, ex.type exam_type, ed.exam_date_number date_number, ed.format, time_of_exam
        FROM exam_dates ed
        JOIN registered_exam_dates rd ON ed.exam_id = rd.exam_id AND ed.exam_date_number = rd.exam_date_number
        JOIN exams ex ON ed.exam_id = ex.exam_id
        JOIN courses co ON ex.course_abbreviation = co.course_abbreviation
        JOIN enrolled_students es ON rd.student_id = es.student_id AND rd.academic_year = es.academic_year
        JOIN users us ON es.student_id = us.user_id
        WHERE us.login = LOWER(SYS_CONTEXT('USERENV','CURRENT_USER'));

-- Write available exam dates for currently logged in user
CREATE VIEW my_available_exam_dates AS
    SELECT co.course_abbreviation,co.name course_name,type exam_type,ed.exam_date_number date_number,format,time_of_exam
        FROM enrolled_students es
        JOIN students_admitted_to_exams sa ON es.student_id = sa.student_id AND es.academic_year = sa.academic_year
        JOIN exams ex ON sa.exam_id = ex.exam_id
        JOIN exam_dates ed ON ex.exam_id = ed.exam_id
        JOIN exams_in_rooms er ON ed.exam_id = er.exam_id AND ed.exam_date_number = er.exam_date_number
        JOIN courses co ON ex.course_abbreviation = co.course_abbreviation
        JOIN users us ON es.student_id = us.user_id
        WHERE us.login = LOWER(SYS_CONTEXT('USERENV','CURRENT_USER')) AND CURRENT_TIMESTAMP BETWEEN ed.registration_start AND ed.registration_end;

--------------------------------------------------------------------------------------------------------------- TRIGGERS
-- Generating sequence for exam_date_number field in table exam_dates
CREATE OR REPLACE TRIGGER bi_tg_exam_dates_dk BEFORE INSERT ON exam_dates FOR EACH ROW
DECLARE
    v_last_number exam_dates.exam_date_number%type;
BEGIN
    SELECT COALESCE(MAX(exam_date_number), 1) last_date_number
        INTO v_last_number
        FROM exam_dates
        WHERE exam_id = :NEW.exam_id;

    :NEW.exam_date_number := v_last_number + 1;
END;

-- Generating sequence for question_number field in table question_assessments
CREATE OR REPLACE TRIGGER bi_tg_question_assessments_dk BEFORE INSERT ON question_assessments FOR EACH ROW
DECLARE
    v_last_number question_assessments.question_number%type;
BEGIN
    SELECT COALESCE(MAX(question_number), 1) last_question_number
        INTO v_last_number
        FROM question_assessments
        WHERE exam_elaboration_id = :NEW.exam_elaboration_id;

    :NEW.question_number := v_last_number + 1;
END;

-- Students cannot register more than 3 exam dates for a term exam.
CREATE OR REPLACE TRIGGER bi_tg_maximum_registered_exam_dates BEFORE INSERT ON registered_exam_dates FOR EACH ROW
DECLARE
    registered_too_many_term EXCEPTION;
    registered_too_many_midterm EXCEPTION;
    v_num_of_registered_term registered_exam_dates.exam_date_number%type;
    v_num_of_registered_midterm registered_exam_dates.exam_date_number%type;
BEGIN
    SELECT COALESCE(MAX(exam_date_number), 0)
        INTO v_num_of_registered_term
        FROM registered_exam_dates red JOIN exam_dates USING (exam_id, exam_date_number) JOIN exams e USING (exam_id)
        WHERE exam_id = :NEW.exam_id AND student_id = :NEW.student_id AND red.academic_year = :NEW.academic_year
            AND e.type = 'term';

    SELECT COALESCE(MAX(exam_date_number), 0)
        INTO v_num_of_registered_midterm
        FROM registered_exam_dates red JOIN exam_dates USING (exam_id, exam_date_number) JOIN exams e USING (exam_id)
        WHERE exam_id = :NEW.exam_id AND student_id = :NEW.student_id AND red.academic_year = :NEW.academic_year
            AND e.type = 'midterm';

    IF v_num_of_registered_term >= 3 THEN
        RAISE registered_too_many_term;
    ELSIF v_num_of_registered_midterm >= 1 THEN
        RAISE registered_too_many_midterm;
    END IF;

    EXCEPTION
        WHEN registered_too_many_term THEN
            RAISE_APPLICATION_ERROR(-20000, 'Student ' || :NEW.student_id || ' cannot register another exam date for term exam '
                                || :NEW.exam_id || ' in ' || :NEW.academic_year || '! Maximum of 3 already reached!');
        WHEN registered_too_many_midterm THEN
            RAISE_APPLICATION_ERROR(-20000, 'Student ' || :NEW.student_id || ' cannot register another exam date for midterm exam '
                || :NEW.exam_id || ' in ' || :NEW.academic_year || '! Maximum of 1 already reached!');
END;

--------------------------------------------------------------------------------------------------------------- PROCEDURES
CREATE OR REPLACE PROCEDURE usp_register_exam_date (
    in_student_id students_admitted_to_exams.student_id%type,
    in_academic_year students_admitted_to_exams.academic_year%type,
    in_exam_id students_admitted_to_exams.exam_id%type,
    in_exam_date_number exam_dates.exam_date_number%type)
IS
    v_reg_start exam_dates.registration_start%type;
    v_reg_end exam_dates.registration_end%type;
    v_max_existing_exam_date exam_dates.exam_date_number%type;
    v_exam_admission students_admitted_to_exams%rowtype;
    v_time_of_exam exam_dates.time_of_exam%type;
BEGIN

    -- Check student is admitted, if not, throws NO_DATA_FOUND
    SELECT *
        INTO v_exam_admission
        FROM students_admitted_to_exams sae
        WHERE sae.student_id = in_student_id AND sae.academic_year = in_academic_year AND sae.exam_id = in_exam_id;

    SELECT COALESCE(MAX(exam_date_number), 0)
        INTO v_max_existing_exam_date
        FROM exam_dates JOIN exams USING (exam_id)
        WHERE exam_id = in_exam_id AND academic_year = in_academic_year;

    IF (in_exam_date_number > v_max_existing_exam_date) THEN
        RAISE_APPLICATION_ERROR(-20002, 'Cannot register not existing exam date number ' || in_exam_date_number || ' for exam ' || in_exam_id || '.');
        RETURN;
    END IF;

    BEGIN
        WITH last_exam_date AS (
            SELECT exam_id, MAX(exam_date_number) exam_date_number
            FROM registered_exam_dates rd
            WHERE rd.student_id = in_student_id AND rd.exam_id = in_exam_id AND rd.academic_year = in_academic_year
            GROUP BY exam_id
        )
        SELECT time_of_exam, exam_date_number
        INTO v_time_of_exam, v_max_existing_exam_date
        FROM last_exam_date
        JOIN exam_dates USING (exam_id, exam_date_number);

        IF v_time_of_exam >= CURRENT_TIMESTAMP THEN
           RAISE_APPLICATION_ERROR(-20003, 'Cannot register next exam date before the previous took place!');
        END IF;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Registering first exam date.');
    END;

    SELECT registration_start
        INTO v_reg_start
        FROM exam_dates
        WHERE exam_id = in_exam_id AND exam_date_number = in_exam_date_number;

    SELECT registration_end
        INTO v_reg_end
        FROM exam_dates
        WHERE exam_id = in_exam_id AND exam_date_number = in_exam_date_number;

    IF (CURRENT_TIMESTAMP < v_reg_start) THEN
        RAISE_APPLICATION_ERROR(-20003, 'Registration for exam date ' || in_exam_date_number || ' of exam ' || in_exam_id ||
                             ' has not yet started!');
    ELSIF (CURRENT_TIMESTAMP > v_reg_end) THEN
        DBMS_OUTPUT.PUT_LINE(v_reg_end);
        RAISE_APPLICATION_ERROR(-20003, 'Registration for exam date ' || in_exam_date_number || ' of exam ' || in_exam_id ||
                             ' has already ended!');
    ELSE
        INSERT INTO registered_exam_dates VALUES (in_exam_id, in_exam_date_number, in_student_id, in_academic_year);
    END IF;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Student ' || in_student_id || ' is not admitted to exam ' || in_exam_id ||
                             ', cannot be registered!');
END;

CREATE OR REPLACE PROCEDURE usp_register_my_own_exam_date(
    in_academic_year students_admitted_to_exams.academic_year%type,
    in_exam_id students_admitted_to_exams.exam_id%type,
    in_exam_date_number exam_dates.exam_date_number%type)
IS
    v_my_student_id enrolled_students.student_id%type;
BEGIN
    SELECT student_id
    INTO v_my_student_id
    FROM enrolled_students es
    JOIN users us ON es.student_id = us.user_id
    WHERE login = LOWER(SYS_CONTEXT('USERENV', 'CURRENT_USER'));

    usp_register_exam_date(v_my_student_id, in_academic_year, in_exam_id, in_exam_date_number);

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20004, 'User' || SYS_CONTEXT('USERENV', 'CURRENT_USER') ||
                                ' is not an enrolled student!');
END;

-- Assume given exam has a condition, where a single question evaluated by 0 points
-- results in 0 from the whole exam. In that case, we set all question_assessments'
-- awarded points to zero in that specific exam_elaboration.
CREATE OR REPLACE PROCEDURE usp_zero_out_results_if_zero_question (
    in_exam_id exam_dates.exam_id%type,
    in_exam_date_number exam_dates.exam_date_number%type)
IS
    CURSOR questions_to_zero_out IS
        WITH have_zero_point_question AS (
            SELECT exam_elaboration_id
            FROM enrolled_students es
            JOIN users us ON us.user_id = es.student_id
            JOIN exam_elaborations ee USING (student_id, academic_year)
            JOIN exam_dates ed USING (exam_id, exam_date_number)
            WHERE exam_id = in_exam_id AND exam_date_number = in_exam_date_number AND EXISTS (
                SELECT *
                    FROM question_assessments qa
                    WHERE qa.exam_elaboration_id = ee.exam_elaboration_id AND qa.awarded_points = 0
                )
        )
        SELECT exam_elaboration_id, question_number, awarded_points
        FROM have_zero_point_question
        JOIN question_assessments USING (exam_elaboration_id)
    FOR UPDATE OF awarded_points;
BEGIN
    FOR question in questions_to_zero_out
    LOOP
        UPDATE question_assessments
            SET awarded_points = 0, "comment" = 'Zeroed out due to condition of no zero questions. Original awarded points: ' || question.awarded_points
            WHERE exam_elaboration_id = question.exam_elaboration_id AND
                  question_number = question.question_number;
    END LOOP;
END;

---------------------------------------------------------------------------------------------------------------- INDEXES
-- Without explicitly created index
EXPLAIN PLAN FOR
WITH summary_results AS (
    SELECT exam_date_number, student_id, SUM(qa.awarded_points) students_summary_points
    FROM enrolled_students st
             JOIN registered_exam_dates rd USING (student_id, academic_year)
             JOIN exam_dates ed USING (exam_id, exam_date_number)
             JOIN exam_elaborations el USING (student_id, academic_year, exam_id, exam_date_number)
             JOIN question_assessments qa USING (exam_elaboration_id)
    WHERE exam_id = 62
    GROUP BY exam_date_number, student_id
)
SELECT exam_date_number, AVG(students_summary_points) points_average
FROM summary_results
GROUP BY exam_date_number;

SELECT * FROM table(DBMS_XPLAN.DISPLAY());

CREATE INDEX ix_exam_elaborations_exam_id ON exam_elaborations (exam_id);
-- improves 6: TABLE ACCESS FULL -> TABLE ACCESS BY INDEX ROWID BATCHED, INDEX RANGE SCAN

-- With created index
EXPLAIN PLAN FOR
WITH summary_results AS (
    SELECT exam_date_number, student_id, SUM(qa.awarded_points) students_summary_points
        FROM enrolled_students st
        JOIN registered_exam_dates rd USING (student_id, academic_year)
        JOIN exam_dates ed USING (exam_id, exam_date_number)
        JOIN exam_elaborations el USING (student_id, academic_year, exam_id, exam_date_number)
        JOIN question_assessments qa USING (exam_elaboration_id)
        WHERE exam_id = 62
        GROUP BY exam_date_number, student_id
)
SELECT exam_date_number, AVG(students_summary_points) points_average
FROM summary_results
GROUP BY exam_date_number;

SELECT * FROM table(DBMS_XPLAN.DISPLAY());

CREATE INDEX ix_question_assessments_id ON question_assessments (exam_elaboration_id DESC);

------------------------------------------------------------------------------------------------------------ PERMISSIONS
-- Second user (xhavli56) acts like a student
-- Access to taught courses nad information about guarantors and lecturers
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON courses TO xhavli56;
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON course_guarantors TO xhavli56;
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON lecturers_teaching_courses TO xhavli56;
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON academics TO xhavli56;

-- Access to information about exams and exam dates + where they are
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON exams TO xhavli56;
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON exam_dates TO xhavli56;
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON exams_in_rooms TO xhavli56;

-- Access to information about available rooms
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON rooms TO xhavli56;

-- Use views for personal information about study
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON my_marks TO xhavli56;
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON my_exam_dates TO xhavli56;
GRANT SELECT, ON COMMIT REFRESH, QUERY REWRITE ON my_available_exam_dates TO xhavli56;

-- Allow creating views.
GRANT CREATE VIEW TO xhavli56;

----------------------------------------------------------------------------------------------------- MATERIALIZED VIEWS
-- Overview of courses created by student (user xhavli56)
CREATE MATERIALIZED VIEW courses_info
    BUILD IMMEDIATE
    ENABLE QUERY REWRITE
AS
    WITH guarantors as (
        SELECT course_abbreviation, first_name, last_name, email, office
        FROM xsmahe01.academics
        JOIN xsmahe01.course_guarantors ON lecturer_id = guarantor_id
    )
    SELECT (course_abbreviation || ' - ' ||  name) course, awarded_credits credits, (first_name || ' ' || last_name || ', '|| email || ', '|| office) guarantor
    FROM guarantors
    JOIN xsmahe01.courses USING (course_abbreviation);

-- Due to REFRESH ON COMMIT not being available (problematic privileges)
-- and courses and their details not changing often; refreshing is (would be) done manually.
BEGIN
    DBMS_MVIEW.REFRESH('courses_info', method=>'?');
END;

------------------------------------------------------------------------------------------------------------------ TESTS
-- Check generating sequence for exam_date_number (bi_tg_exam_dates_dk)
SELECT * FROM exam_dates WHERE exam_id = 33 ORDER BY exam_date_number DESC FETCH FIRST 1 ROW ONLY;
INSERT INTO exam_dates (exam_id, exam_date_number, format, no_questions, time_of_exam, registration_start, registration_end, student_capacity)
    VALUES (33, NULL, 'written', 5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 200);
SELECT * FROM exam_dates WHERE exam_id = 33 ORDER BY exam_date_number DESC FETCH FIRST 1 ROW ONLY;

-- Check generating sequence for question_assessments (bi_tg_question_assessments_dk)
SELECT * FROM question_assessments WHERE exam_elaboration_id = 101 ORDER BY question_number DESC FETCH FIRST 1 ROW ONLY;
INSERT INTO question_assessments (exam_elaboration_id, question_number, lecturer_id, awarded_points, time_of_assessments, "comment")
    VALUES (101, NULL, 220546, 0, CURRENT_TIMESTAMP, 'good job');
SELECT * FROM question_assessments WHERE exam_elaboration_id = 101 ORDER BY question_number DESC FETCH FIRST 1 ROW ONLY;

-- Zero out all questions from this specific exam if at least one question is evaluated by 0 points.
SELECT * FROM question_assessments WHERE exam_elaboration_id IN (100, 150, 160);
BEGIN
    usp_zero_out_results_if_zero_question(62, 1);
END;
COMMIT;
SELECT * FROM question_assessments WHERE exam_elaboration_id IN (100, 150, 160);

-- Check allowing students to register exam dates. Non existing exam date number 13.
BEGIN
    usp_register_exam_date(231754, '2021/2022', 62, 13);
END;

-- Third (third in total) is ok.
BEGIN
    usp_register_exam_date(231754, '2021/2022', 62, 3);
END;

-- But registering fourth (in total) is not allowed.
BEGIN
    usp_register_exam_date(231754, '2021/2022', 62, 4);
END;

-- Test for students_marks view
SELECT * FROM students_marks;

-- Test for my_marks view - it should write marks for logged in user
SELECT * FROM my_marks;

-- Test for materialized view courses_info
SELECT * FROM courses_info;
